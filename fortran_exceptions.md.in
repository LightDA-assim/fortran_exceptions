---
project: Fortran exceptions library
summary: Exception library for Fortran 2003 and later
author: John Haiducek
src_dir: ${PROJ_DIR}/src
output_dir: ${DOC_DIR}
exclude_dir: ${PROJECT_BINARY_DIR}
             ${PROJ_DIR}/tests
preprocessor: {!.PREPROCESSOR!}
include: ${FORD_PROJECT_INCLUDES}
---

This library provides exception handling for Fortran 2003 and later. It is based the methodology in Poppe et al. 2012[^1]. It enables errors in a Fortran procedure to be communicated to the caller and, optionally, handled. Errors are encapsulated an a derived type that contains an error message and other information.

This provides the following advantages over other error handling approaches:

- Compared with integer status codes, the derived type can provide more detailed information about what went wrong.
- Compared with directly invoking `stop` or `error stop`, this library provides an opportunity for the program to recover from the error and continue

## Usage example

A procedure that may throw an exception should have an optional allocatable argument of type `error_status`. An exception can be thrown by passing this optional argument and a new exception to the `throw` subroutine. The `new_exception` function provides a convenient way to create the exception. For example:

``` fortran
subroutine throwing_procedure(status)
  !! Procedure that throws an exception and exits

  use exceptions, ONLY: throw, exception, new_exception, error_status

  implicit none

  ! Arguments
  class(error_status), intent(out), allocatable, optional::status
      !! Error status

  call throw(status, new_exception("An error occurred"))
  return

end subroutine throwing_procedure
```

A calling function can check the exception type using a `select type` statement and, if appropriate, handle the exception. For example:

``` fortran
subroutine exception_handling_procedure
  use exceptions, ONLY: exception, error_status

  implicit none

  !! Procedure that calls exception-throwing procedures and handles the
  !! exception

  class(error_status), allocatable::status
      !! Error status

  ! Call a routine that throws an error
  call throwing_procedure(status)

  ! Handle the error
  select type (status)
  class is (exception)
    print *, "Handled error:", status%as_string()
    status%handled = .true.
  end select

end subroutine exception_handling_procedure
```

After handling an exception, the caller must set the `handled` attribute to `.true.`. If the `handled` attribute is false when the exception goes out of scope, the exception finalizer will invoke `error stop`, causing the program to exit immediately in an error state. If no exception is thrown by a function, the status will have the generic type `error_status` and the program will continue running normally.

## Status types

The library provides a built-in type, `exception`, representing a generic exception. In addition, it provides a generic `no_error` type representing a non-error condition. Both are extensions of the base `error_status`.

### Custom exceptions

Custom exception types are created by extending the generic `exception` type. For example, a custom file_io_exception might be defined as follows:

``` fortran
module io_exceptions

  use exceptions, ONLY: exception, error_status, no_error

  implicit none

  type, extends(exception)::io_exception
    integer::code
      !! Integer error code
    character(:), allocatable::filename
      !! Name of file on which the I/O failure occurred
  end type io_exception

  function new_io_exception(code, message, filename, procedure) &
    result(exc)

    !! Create a new IO exception, or a no_error object if the error code is 0.

    ! Arguments
    integer, intent(in)::code
        !! IO error code
    character(*), intent(in), optional::message
        !! Custom error message
    character(*), intent(in), optional::procedure
        !! Procedure where error occured
    character(*), intent(in), optional::filename
      !! Name of file on which the I/O failure occurred

    ! Result
    type(io_exception)::exc  ! IO exception object

    exc%code = code
    if (present(procedure)) exc%procedure = procedure
    if (present(filename)) exc%filename = filename

    if (present(message)) then
      exc%message = message
    else
      exc%message = 'IO exception on file '//filename
    end if

  end function new_io_exception

end module io_exceptions
```

An `io_exception` can then be thrown with something like `throw(status, new_io_exception(10,'Read error','read_input_files','input.dat'))`. A calling procedure can then handle an i/o exception with:

``` fortran
select type(status)
class is(io_exception)
  !! An i/o error occurred

  ! Do whatever is required to handle the exception here

  status%handled=.true.
end select
```

The above code will continue on exceptions of type io_exception, but the program will exit with an error if an exception of any other type is thrown.

[^1]: Poppe, K., Cools, R., & Vandewoestyne, B. (2012). Error handling in Fortran 2003. ACM SIGPLAN Fortran Forum, 31(2), 7â€“19. <https://doi.org/10.1145/2338786.2338787>
